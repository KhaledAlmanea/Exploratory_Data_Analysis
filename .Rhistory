scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
install.packages("RColorBrewer")
# install and load the RColorBrewer package
install.packages('RColorBrewer')
install.packages("RColorBrewer")
# install and load the RColorBrewer package
install.packages('RColorBrewer')
install.packages("RColorBrewer")
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
# load the ggplot graphics package and the others
library(ggplot2)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
View(cuberoot_trans)
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
View(cuberoot_trans)
library(scales)
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Cut, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
View(cuberoot_trans)
install.package('bitops')
install.packages('RCurl')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
# Chunk 1
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
install.packages("psych", repos = "http://cran.us.r-project.org")
install.packages("corrplot", repos = "http://cran.us.r-project.org")
install.packages("pander", repos = "http://cran.us.r-project.org")
library(ggplot2)
library(dplyr)
library(pander)
library(memisc)
library(pander)
library(corrplot)
setwd('C:\\Users\\kh-mo\\Desktop\\courses\\Udacity_Data_Sintest\\data analyst nanodgree projects\\Lesson 6 - EDA')
# Chunk 2
# Load the Data
red_wine <- read.csv('wineQualityReds.csv')
# Chunk 3
summary(red_wine)
# Chunk 4
head(red_wine)
# Chunk 5
ggplot(data = red_wine, aes(x = quality)) +
geom_histogram(binwidth = 0.1)
# Chunk 6
library(gridExtra)
p1 <- ggplot(data = subset(red_wine, fixed.acidity > 4 & fixed.acidity <= 12), aes(x = fixed.acidity)) +
geom_histogram(binwidth = 0.1) +
scale_x_continuous(breaks = seq(4.5, 12, 0.5))
p2 <-ggplot(data = subset(red_wine, volatile.acidity > 0.05 & volatile.acidity <= 1.2 ), aes(x = volatile.acidity)) +
geom_histogram(binwidth = 0.01) +
scale_x_continuous(breaks = seq(0.05, 1.2, 0.1))
p3 <- ggplot(data = subset(red_wine, citric.acid > 0 & citric.acid <= 0.75), aes(x = citric.acid)) +
geom_histogram(binwidth = 0.01) +
scale_x_continuous(breaks = seq(0.05, 0.75, 0.05))
grid.arrange(p1, p2, p3)
# Chunk 7
ggplot(data = subset(red_wine, residual.sugar > 1.3 & residual.sugar <= 4), aes(x = residual.sugar)) +
geom_histogram(binwidth = 0.1) +
scale_x_continuous(breaks = seq(0.5, 4.5, 0.5))
# Chunk 8
ggplot(data = red_wine, aes(x = chlorides)) +
geom_histogram(binwidth = 0.001) +
scale_x_continuous(breaks = seq(0, 6, 0.05))
# Chunk 9
ggplot(data = subset(red_wine, chlorides > 0.025 & chlorides <= 0.125), aes(x = chlorides)) +
geom_histogram(binwidth = 0.001) +
scale_x_continuous(breaks = seq(0.025, 0.125, 0.01))
# Chunk 10
ggplot(data = subset(red_wine, free.sulfur.dioxide > 1 & free.sulfur.dioxide <= 40), aes(x = free.sulfur.dioxide)) +
geom_histogram(binwidth = 1)
# Chunk 11
ggplot(data = subset(red_wine, total.sulfur.dioxide <= 150), aes(x = total.sulfur.dioxide)) +
geom_histogram(binwidth = 2) +
scale_x_continuous(breaks = seq(0, 150, 10))
# Chunk 12
ggplot(data = red_wine, aes(x = density)) +
geom_histogram(binwidth = 0.001) +
scale_x_continuous(breaks = seq(0.9900, 1.005, 0.001))
# Chunk 13
ggplot(data = red_wine, aes(x = pH)) +
geom_histogram(binwidth = 0.1) +
scale_x_continuous(breaks = seq(2.70, 4.1, 0.1))
# Chunk 14
ggplot(data = subset(red_wine, sulphates <= 1), aes(x = sulphates)) +
geom_histogram(binwidth = 0.01) +
scale_x_continuous(breaks = seq(0.3, 2.1, 0.05))
# Chunk 15
ggplot(data = red_wine, aes(x = alcohol)) +
geom_histogram(binwidth = 0.1) +
scale_x_continuous(breaks = seq(8, 15, 0.5))
# Chunk 16
# create red_wine_subset for later use in the correlation
red_wine_subset <- red_wine[, c(2:13)]
# change quality to ordered factor
red_wine$quality <- factor(red_wine$quality, ordered = TRUE)
# create quality rating variable
red_wine$rating <- ifelse(red_wine$quality < 5, 'bad', ifelse(
red_wine$quality < 7, 'average', 'good'))
red_wine$rating <- ordered(red_wine$rating,
levels = c('bad', 'average', 'good'))
# Chunk 17
c <- cor(
red_wine %>%
# first we remove unwanted columns
dplyr::select(-X) %>%
dplyr::select(-rating) %>%
mutate(
# now we translate quality to a number
quality = as.numeric(quality)
)
)
emphasize.strong.cells(which(abs(c) > .3 & c != 1, arr.ind = TRUE))
pandoc.table(c)
# Chunk 18
library(GGally)
pairs.panels(red_wine_subset,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
# Chunk 19
ggplot(data = red_wine, aes(x = fixed.acidity, y = citric.acid)) +
geom_jitter() +
geom_smooth(model = lm, color = 'red')
# Chunk 20
p4 <- ggplot(data = red_wine, aes(x = fixed.acidity, y = pH)) +
geom_jitter(alpha = 0.2) +
geom_smooth(model = lm, color = 'red') +
scale_x_log10()
p5<- ggplot(data = subset(red_wine, citric.acid > 0 & citric.acid <= 0.75), aes(x = citric.acid, y = pH)) +
geom_jitter(alpha = 0.2) +
geom_smooth(model = lm, color = 'red')
p6 <- ggplot(data = red_wine, aes(x = volatile.acidity, y = pH)) +
geom_jitter(alpha = 0.2) +
geom_smooth(model = lm, color = 'red')
grid.arrange(p4, p5, p6)
# Chunk 21
ggplot(data = red_wine, aes(x = density, y = alcohol)) +
geom_jitter() +
geom_smooth(model = lm, color = 'red') +
scale_y_continuous(breaks = seq(8, 15, 0.5)) +
scale_x_continuous(breaks = seq(0.9900, 1.005, 0.001))
# Chunk 22
ggplot(data = red_wine, aes(x = density, y = alcohol)) +
geom_jitter(alpha = 1/5) +
geom_smooth(model = lm, color = 'red') +
scale_y_continuous(breaks = seq(9, 12, 0.5), limits = c(9.5, 11.5)) +
scale_x_continuous(breaks = seq(0.9900, 1.005, 0.001))
summary(red_wine$alcohol)
summary(red_wine$density)
# Chunk 23
ggplot(data = red_wine, aes(x = quality, y = alcohol, color = rating)) +
geom_boxplot()
# Chunk 24
ggplot(data = subset(red_wine, residual.sugar > 1.3 & residual.sugar <= 2.6), aes(x = residual.sugar, y = density)) +
geom_jitter() +
geom_smooth(model = lm, color = 'red')
summary(red_wine$residual.sugar)
# Chunk 25
ggplot(data = red_wine, aes(x = quality, y = volatile.acidity, color = rating)) +
geom_boxplot()
# Chunk 26
ggplot(data = subset(red_wine, residual.sugar > 1.3 & residual.sugar <= 2.6), aes(x = residual.sugar, y = free.sulfur.dioxide)) +
geom_jitter() +
geom_smooth(model = lm, color = 'red')
# Chunk 27
ggplot(data = subset(red_wine, residual.sugar > 1.3 & residual.sugar <= 2.6), aes(x = residual.sugar, y = alcohol)) +
geom_jitter() +
geom_smooth(model = lm, color = 'red')
# Chunk 28
ggplot(data = red_wine, aes(x = residual.sugar, y = alcohol)) +
geom_jitter() +
geom_smooth(model = lm, color = 'red')
# Chunk 29
ggplot(data = red_wine, aes(x = chlorides, y = sulphates)) +
geom_jitter() +
geom_smooth(model = lm, color = 'red')
summary(red_wine$chlorides)
summary(red_wine$sulphates)
# Chunk 30
ggplot(data = subset(red_wine, sulphates >= 0.55 & sulphates <= 0.73 & chlorides < 0.1), aes(x = chlorides, y = sulphates)) +
geom_jitter() +
geom_smooth(model = lm, color = 'red')
# Chunk 31
ggplot(data = red_wine, aes(x = density, y = pH)) +
geom_jitter() +
geom_smooth(model = lm, color = 'red')
# Chunk 32
p7 <- ggplot(data = subset(red_wine, sulphates >= 0.55 & sulphates <= 0.9), aes(x = quality, y = sulphates, color = rating)) +
geom_boxplot()
p8 <- ggplot(data = red_wine, aes(x = quality, y = citric.acid, color = rating)) +
geom_boxplot()
grid.arrange(p7, p8, ncol = 2)
# Chunk 33
ggplot(data = red_wine, aes(x = density, y = alcohol, color = rating)) +
geom_boxplot()
# Chunk 34
ggplot(data = red_wine, aes(x = residual.sugar, y = density, color = alcohol)) +
geom_jitter()
# Chunk 35
ggplot(data = subset(red_wine, residual.sugar > 1.3 & residual.sugar <= 2.6), aes(x = residual.sugar, y = density, color = alcohol)) +
geom_jitter() +
geom_smooth(model = lm, se = FALSE,size=1, color = 'red') +
facet_wrap(~rating)
# Chunk 36
ggplot(data = red_wine, aes(y = pH, x = alcohol, color = quality)) +
geom_jitter(alpha = 0.8, size = 1) +
geom_smooth(method = "lm", size=1, color = 'red')  +
facet_wrap(~rating)
# Chunk 37
set.seed(1221)
training_data <- sample_frac(red_wine, .6)
test_data <- red_wine[ !red_wine$X %in% training_data$X, ]
m1 <- lm(as.numeric(quality) ~ alcohol, data = training_data)
m2 <- update(m1, ~ . + sulphates)
m3 <- update(m2, ~ . + volatile.acidity)
m4 <- update(m3, ~ . + citric.acid)
m5 <- update(m4, ~ . + fixed.acidity)
m6 <- update(m2, ~ . + pH)
mtable(m1,m2,m3,m4,m5,m6)
# Chunk 38
wine_predict <- data.frame(
test_data$quality,
predict(m5, test_data) - as.numeric(test_data$quality)
)
names(wine_predict) <- c("quality", "error")
ggplot(data=wine_predict, aes(x=quality,y=error)) +
geom_jitter(alpha = 0.3)
# Chunk 39
# Chunk 40
# Chunk 41
ggplot(data = red_wine, aes(y = alcohol, x = quality)) +
geom_jitter(alpha = .3)  +
geom_boxplot(alpha = .5,color = 'blue') +
stat_summary(fun.y = "mean",
geom = "point",
color = "red",
shape = 8,
size = 4) +
xlab("Quality") +
ggtitle("Influence of alcohol on wine quality")
ggplot(data = red_wine, aes(y = alcohol, x = quality)) +
geom_jitter(alpha = .3)  +
geom_boxplot(alpha = .5,color = rating) +
stat_summary(fun.y = "mean",
geom = "point",
color = "red",
shape = 8,
size = 4) +
xlab("Quality") +
ggtitle("Influence of alcohol on wine quality")
ggplot(data = red_wine, aes(y = alcohol, x = quality, color = rating)) +
geom_jitter(alpha = .3)  +
geom_boxplot(alpha = .5,color = 'blue') +
stat_summary(fun.y = "mean",
geom = "point",
color = "red",
shape = 8,
size = 4) +
xlab("Quality") +
ggtitle("Influence of alcohol on wine quality")
ggplot(data = red_wine, aes(y = alcohol, x = quality, color = rating)) +
geom_jitter(alpha = .3)  +
geom_boxplot(alpha = .5) +
stat_summary(fun.y = "mean",
geom = "point",
color = "red",
shape = 8,
size = 4) +
xlab("Quality") +
ggtitle("Influence of alcohol on wine quality")
ggplot(data = red_wine, aes(y = alcohol, x = quality, color = rating)) +
geom_jitter(alpha = .3)  +
geom_boxplot(alpha = .5, color = 'red') +
stat_summary(fun.y = "mean",
geom = "point",
color = "red",
shape = 8,
size = 4) +
xlab("Quality") +
ggtitle("Influence of alcohol on wine quality")
df <- data.frame(
test_data$quality,
predict(m5, test_data) - as.numeric(test_data$quality)
)
names(df) <- c("quality", "error")
ggplot(data=df, aes(x=quality,y=error)) +
geom_jitter(alpha = 0.3) +
ggtitle("Linear model errors vs expected quality")
ggplot(data = red_wine, aes(y = pH, x = alcohol, color = quality)) +
geom_jitter(alpha = 0.8, size = 1) +
geom_smooth(method = "lm", size=1, color = 'red')  +
facet_wrap(~rating)
ggplot(data = red_wine, aes(y = pH, x = alcohol, color = quality)) +
geom_jitter(alpha = 0.8, size = 1) +
geom_smooth(method = "lm", size=1, color = 'red')  +
facet_wrap(~rating)  +
ggtitle("Influence of pH and alcohol on wine quality")
ggplot(data = red_wine, aes(y = pH, x = alcohol, color = quality)) +
geom_jitter(alpha = 0.8, size = 1) +
geom_smooth(method = "lm", size=1, color = 'red')  +
facet_wrap(~rating)  +
stat_summary(fun.y = "mean",
geom = "point",
color = "red",
shape = 8,
size = 4)
ggtitle("Influence of pH and alcohol on wine quality")
ggplot(data = red_wine, aes(y = pH, x = alcohol, color = quality)) +
geom_jitter(alpha = 0.8, size = 1) +
geom_smooth(method = "lm", size=1, color = 'red')  +
facet_wrap(~rating)  +
stat_summary(fun.y = "mean",
geom = "line",
color = "red",
shape = 8,
size = 4)
ggtitle("Influence of pH and alcohol on wine quality")
corrplot(red_wine)
corrplot(c)
corrplot(c, method = "number")
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(c, method = "color", col = col(200),
type = "upper", order = "hclust", number.cex = .7,
addCoef.col = "black", # Add coefficient of correlation
tl.col = "black", tl.srt = 90, # Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.01, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag = FALSE)
# matrix of the p-value of the correlation
p.mat <- cor.mtest(red_wine)$p
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(c, method = "color", col = col(200),
type = "upper", order = "hclust", number.cex = .7,
addCoef.col = "black", # Add coefficient of correlation
tl.col = "black", tl.srt = 90, # Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.01, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag = FALSE)
# matrix of the p-value of the correlation
p.mat <- cor.mtest(red_wine)$p
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(c, method = "color", col = col(200),
type = "upper", order = "hclust", number.cex = .7,
addCoef.col = "black", # Add coefficient of correlation
tl.col = "black", tl.srt = 90, # Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.01, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag = FALSE)
corrplot(M, method = "number")
corrplot(M, method = "number")
corrplot(c, method = "number")
corrplot(c, method = "number", uppCI.mat = FALSE)
corrplot(c, method = "number", type = "upper")
corrplot(c, method = "number", type = "upper", bg = "black")
corrplot(c, method = "number", type = "upper", bg = "black", title = "Red Wine Variables Correlations")
corrplot(c, method = "number", type = "Lower", bg = "black", title = "Red Wine Variables Correlations")
corrplot(c, method = "number", type = "lower", bg = "black", title = "Red Wine Variables Correlations")
c <- cor(
red_wine %>%
# first we remove unwanted columns
dplyr::select(-X) %>%
dplyr::select(-rating) %>%
mutate(
# now we translate quality to a number
quality = as.numeric(quality)
)
)
corrplot(c, method = "number", type = "lower", bg = "black", title = "Red Wine Variables Correlations")
library("knitr")
knit2html("file")
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
library(ggplot2)
library(dplyr)
library(pander)
library(memisc)
library(pander)
library(corrplot)
setwd('C:\\Users\\kh-mo\\Desktop\\courses\\Udacity_Data_Sintest\\data analyst nanodgree projects\\Lesson 6 - EDA')
